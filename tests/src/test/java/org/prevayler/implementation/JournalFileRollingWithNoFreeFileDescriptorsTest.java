//Prevayler(TM) - The Free-Software Prevalence Layer.//Copyright (C) 2001-2004 Klaus Wuestefeld//This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.//Contributions: Justin Sampson.package org.prevayler.implementation;import static org.easymock.EasyMock.eq;import static org.easymock.EasyMock.expect;import static org.easymock.EasyMock.isA;import static org.powermock.api.easymock.PowerMock.*;import java.io.File;import java.io.FileNotFoundException;import java.util.Arrays;import org.junit.runner.RunWith;import org.powermock.core.MockRepository;import org.powermock.core.classloader.annotations.PrepareForTest;import org.powermock.modules.junit4.PowerMockRunner;import org.prevayler.Prevayler;import org.prevayler.PrevaylerFactory;import org.prevayler.foundation.DurableOutputStream;import org.prevayler.foundation.FileIOTest;import org.prevayler.foundation.StopWatch;import org.prevayler.foundation.monitor.Monitor;import org.prevayler.foundation.monitor.NullMonitor;import org.prevayler.implementation.journal.PersistentJournal;@RunWith(PowerMockRunner.class)@PrepareForTest({PersistentJournal.class, StopWatch.class})public class JournalFileRollingWithNoFreeFileDescriptorsTest extends FileIOTest {	private Prevayler<AppendingSystem> _prevayler;    private int _journalSizeThreshold = 232; //Enough to hold 2 transactions.    private int _journalAgeThreshold = 0; //0 means infinite    private boolean _useExistingJournalIfRollFails = true;    private Monitor _monitor = new NullMonitor();    public void testExistingJournalFileContinuesToBeUsedIfAnExceptionIsThrownRolling() throws Exception {        crashRecover(""); //There is nothing to recover at first. A new system will be created.        append("a", "a");        append("b", "ab");        expectNew(DurableOutputStream.class, journalFileForTransaction(3), true).andThrow(new FileNotFoundException("No more file handles"));        expectNew(DurableOutputStream.class, journalFileForTransaction(4), true).andThrow(new FileNotFoundException("No more file handles"));        replayAll();        append("c", "abc");  // should trigger roll        append("d", "abcd");        verifyAll();        crashRecover("abcd");    }    public void testMonitorIsNotifiedIfAnExceptionIsThrownRolling() throws Exception {        _monitor = createMock(Monitor.class);        crashRecover(""); //There is nothing to recover at first. A new system will be created.        append("a", "a");        append("b", "ab");        FileNotFoundException exception = new FileNotFoundException("No more file handles");        expectNew(DurableOutputStream.class, isA(File.class), eq(true)).andThrow(exception).times(2);        _monitor.notify(PersistentJournal.class, expectedErrorMessage(journalFileForTransaction(1)), exception);        replayAll();        append("c", "abc");  // should trigger roll        append("d", "abcd");  // try to roll but error should not be logged        verifyAll();        resetAll();        MockRepository.remove(DurableOutputStream.class);        // let the journal roll to clear the notification state        append("e", "abcde"); //will successfully roll        append("f", "abcdef");        // ensure a fresh failure causes a notification        expectNew(DurableOutputStream.class, isA(File.class), eq(true)).andThrow(exception);        _monitor.notify(PersistentJournal.class, expectedErrorMessage(journalFileForTransaction(5)), exception);        replayAll();        append("g", "abcdefg");  // should trigger roll        verifyAll();    }    public void testFailureReportedIfExceptionIsThrownOnFirstAttemptToOpenTheJournal() throws Exception {        crashRecover(""); //There is nothing to recover at first. A new system will be created.        expectNew(DurableOutputStream.class, isA(File.class), eq(true)).andThrow(new FileNotFoundException("No more file handles"));        replayAll();        try {            append("a", null);            fail();        } catch (IllegalStateException e) {            assertEquals("All transaction processing is now aborted, probably due to an earlier IOException.", e.getMessage());        }        verifyAll();        crashRecover(""); //The write failed    }    public void testAfterRollFailsASubsequentTransactionWillTryToRoll() throws Exception {        crashRecover(""); //There is nothing to recover at first. A new system will be created.        append("a", "a");        append("b", "ab");        expectNew(DurableOutputStream.class, journalFileForTransaction(3), true).andThrow(new FileNotFoundException("No more file handles"));        replayAll();        append("c", "abc"); //will fail to roll        verifyAll();        MockRepository.remove(DurableOutputStream.class);        append("d", "abcd"); //will successfully roll        crashRecover("abcd");        assertEquals(Arrays.asList(journalFileForTransaction(1), journalFileForTransaction(4)), Arrays.asList(new File(_testDirectory).listFiles()));    }    public void testJournalRollsWhenAgeThresholdElapsed() throws Exception {        _journalSizeThreshold = 0;        _journalAgeThreshold = 60000;        crashRecover(""); //There is nothing to recover at first. A new system will be created.        StopWatch stopWatch = createMock(StopWatch.class);        mockStatic(StopWatch.class, StopWatch.class.getMethod("start"));        expect(StopWatch.start()).andReturn(stopWatch);        replayAll();        append("a", "a");        verifyAll();        resetAll();        expect(stopWatch.millisEllapsed()).andReturn(60001L);        expect(StopWatch.start()).andReturn(stopWatch);        replayAll();        append("b", "ab");        verifyAll();        assertEquals(2, new File(_testDirectory).list().length);    }    public void testJournalTimerNotResetWhenRollFails() throws Exception {        _journalSizeThreshold = 0;        _journalAgeThreshold = 60000;        crashRecover(""); //There is nothing to recover at first. A new system will be created.        StopWatch stopWatch = createMock(StopWatch.class);        mockStatic(StopWatch.class, StopWatch.class.getMethod("start"));        expect(StopWatch.start()).andReturn(stopWatch);        replayAll();        append("a", "a");        verifyAll();        resetAll();        expect(stopWatch.millisEllapsed()).andReturn(60001L);        expectNew(DurableOutputStream.class, journalFileForTransaction(2), true).andThrow(new FileNotFoundException("No more file handles"));        replayAll();        append("b", "ab");        verifyAll();        assertEquals(1, new File(_testDirectory).list().length);    }    public void testDisablingTheToleranceFailsTheTransactionIfAnExceptionIsThrownRolling() throws Exception {        _useExistingJournalIfRollFails = false;        crashRecover(""); //There is nothing to recover at first. A new system will be created.        append("a", "a");        append("b", "ab");        expectNew(DurableOutputStream.class, journalFileForTransaction(3), true).andThrow(new FileNotFoundException("No more file handles"));        replayAll();        try {            append("c", "abc");  // should trigger roll            fail();        } catch (IllegalStateException e) {            assertEquals("All transaction processing is now aborted, probably due to an earlier IOException.", e.getMessage());        }        verifyAll();    }    private String expectedErrorMessage(File currentJournalFileName) {        return String.format("An IOException was thrown while creating a .journal file. The current file [%s] will continue to be used until the journal can be rolled.", currentJournalFileName);    }    private File journalFileForTransaction(int transactionNumber) {        return new PrevaylerDirectory(_testDirectory).journalFile(transactionNumber, "journal");    }    private void crashRecover(String expectedResult) throws Exception {		out("CrashRecovery.");		if (_prevayler != null) _prevayler.close();		PrevaylerFactory<AppendingSystem> factory = new PrevaylerFactory<AppendingSystem>();        factory.configureJournalFileSizeThreshold(_journalSizeThreshold);        factory.configureJournalFileAgeThreshold(_journalAgeThreshold);		factory.configurePrevalenceDirectory(_testDirectory);		factory.configurePrevalentSystem(new AppendingSystem());        factory.configureMonitor(_monitor);        factory.configureUseExistingJournalIfRollFails(_useExistingJournalIfRollFails);		_prevayler = factory.create();		verify(expectedResult);	}	private void append(String appendix, String expectedResult) throws Exception {		out("Appending " + appendix);		_prevayler.execute(new Appendix(appendix));		verify(expectedResult);	}	private void verify(String expectedResult) {		out("Expecting result: " + expectedResult);		assertEquals(expectedResult, system().value());	}	private AppendingSystem system() {		return _prevayler.prevalentSystem();	}	private static void out(Object obj) {		if (false) System.out.println(obj);   //Change this line to see what the test is doing.	}}